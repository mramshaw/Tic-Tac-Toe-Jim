{"version":3,"sources":["index.js"],"names":["Board","props","state","squares","Array","fill","xNext","i","this","slice","checkForWinner","setState","Square","value","onClick","handleClick","status","winner","className","renderSquare","React","Component","Game","lines","length","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c7a85e4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(25).fill(null),\n            xNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (checkForWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xNext: !this.state.xNext,\n        });\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    render() {\n        const winner = checkForWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xNext ? 'X' : 'O');\n        }\n\n        return (\n          <div>\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row\">\n              {this.renderSquare(0)}{this.renderSquare(1)}{this.renderSquare(2)}{this.renderSquare(3)}{this.renderSquare(4)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(5)}{this.renderSquare(6)}{this.renderSquare(7)}{this.renderSquare(8)}{this.renderSquare(9)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(10)}{this.renderSquare(11)}{this.renderSquare(12)}{this.renderSquare(13)}{this.renderSquare(14)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(15)}{this.renderSquare(16)}{this.renderSquare(17)}{this.renderSquare(18)}{this.renderSquare(19)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(20)}{this.renderSquare(21)}{this.renderSquare(22)}{this.renderSquare(23)}{this.renderSquare(24)}\n            </div>\n          </div>\n        );\n    }\n}\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction checkForWinner(squares) {\n    const lines = [\n        // Verticals\n        [0, 1, 2, 3], [1, 2, 3, 4],\n        [5, 6, 7, 8], [6, 7, 8, 9],\n        [10, 11, 12, 13], [11, 12, 13, 14],\n        [15, 16, 17, 18], [16, 17, 18, 19],\n        [20, 21, 22, 23], [21, 22, 23, 24],\n        // Horizontals\n        [0, 5, 10, 15], [5, 10, 15, 20],\n        [1, 6, 11, 16], [6, 11, 16, 21],\n        [2, 7, 12, 17], [7, 12, 17, 22],\n        [3, 8, 13, 18], [8, 13, 18, 23],\n        [4, 9, 14, 19], [9, 14, 19, 24],\n        // Diagonals\n        [0, 6, 12, 18], [6, 12, 18, 24],\n        [1, 7, 13, 19], [5, 11, 17, 23],\n        [4, 8, 12, 16], [8, 12, 16, 20],\n        [3, 7, 11, 15], [9, 13, 17, 21]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}